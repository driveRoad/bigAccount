{"version":3,"sources":["../src/index.js"],"names":["ImageminPlugin","options","disable","test","minFileSize","maxFileSize","Infinity","maxConcurrency","length","plugins","optipng","optimizationLevel","gifsicle","jpegtran","progressive","svgo","pngquant","externalImages","sources","destination","cacheFolder","imageminOptions","testFunction","plugin","pluginOptions","push","compiler","compilation","callback","throttle","promises","optimizeWebpackImages","concat","optimizeExternalImages","all","assets","asset","filename","assetSource","source","optimizedImageBuffer","invokedDestination","fileData","writeFilePath","resolve"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path'\nimport { cpus } from 'os'\nimport map from 'lodash.map'\nimport imageminSvgo from 'imagemin-svgo'\nimport createThrottle from 'async-throttle'\nimport imageminOptipng from 'imagemin-optipng'\nimport imageminPngquant from 'imagemin-pngquant'\nimport imageminGifsicle from 'imagemin-gifsicle'\nimport imageminJpegtran from 'imagemin-jpegtran'\nimport RawSource from 'webpack-sources/lib/RawSource'\n\nimport {\n  buildTestFunction,\n  invokeIfFunction,\n  getFromCacheIfPossible,\n  readFile,\n  writeFile,\n  optimizeImage\n} from './helpers.js'\n\nexport default class ImageminPlugin {\n  constructor (options = {}) {\n    // I love ES2015!\n    const {\n      disable = false,\n      test = /.*/,\n      minFileSize = 0,\n      maxFileSize = Infinity,\n      maxConcurrency = cpus().length,\n      plugins = [],\n      optipng = {\n        optimizationLevel: 3\n      },\n      gifsicle = {\n        optimizationLevel: 1\n      },\n      jpegtran = {\n        progressive: false\n      },\n      svgo = {},\n      pngquant = null,\n      externalImages = {\n        sources: [],\n        destination: '.'\n      },\n      cacheFolder = null\n    } = options\n\n    this.options = {\n      disable,\n      maxConcurrency,\n      imageminOptions: {\n        plugins: []\n      },\n      testFunction: buildTestFunction(test, minFileSize, maxFileSize),\n      externalImages,\n      cacheFolder\n    }\n\n    // As long as the options aren't `null` then include the plugin. Let the destructuring above\n    // control whether the plugin is included by default or not.\n    for (let [plugin, pluginOptions] of [\n      [imageminOptipng, optipng],\n      [imageminGifsicle, gifsicle],\n      [imageminJpegtran, jpegtran],\n      [imageminSvgo, svgo],\n      [imageminPngquant, pngquant]\n    ]) {\n      if (pluginOptions !== null) {\n        this.options.imageminOptions.plugins.push(plugin(pluginOptions))\n      }\n    }\n\n    // And finally, add any plugins that they pass in the options to the internal plugins array\n    this.options.imageminOptions.plugins.push(...plugins)\n  }\n\n  apply (compiler) {\n    const options = this.options\n\n    // If disabled, short-circuit here and just return\n    if (options.disable === true) return null\n\n    // Access the assets once they have been assembled\n    compiler.plugin('emit', async (compilation, callback) => {\n      // Create a throttle object which will limit the number of concurrent processes running\n      const throttle = createThrottle(this.options.maxConcurrency)\n\n      try {\n        // Optimise all images at the same time (throttled to maxConcurrency)\n        // and await until all of them to complete\n        const promises = this.optimizeWebpackImages(throttle, compilation).concat(this.optimizeExternalImages(throttle))\n        await Promise.all(promises)\n\n        // At this point everything is done, so call the callback without anything in it\n        callback()\n      } catch (err) {\n        // if at any point we hit a snag, pass the error on to webpack\n        callback(err)\n      }\n    })\n  }\n\n  /**\n   * Optimize images from webpack and put them back in the asset array when done\n   * @param  {Function} throttle       The setup throttle library\n   * @param  {Object} compilation      The compilation from webpack-sources\n   * @return {Promise[]}               An array of promises that resolve when each image is done being optimized\n   */\n  optimizeWebpackImages (throttle, compilation) {\n    const {\n      testFunction,\n      cacheFolder\n    } = this.options\n\n    // Return an array of promises that resolve when each file is done being optimized\n    // pass everything through the throttle function to limit maximum concurrency\n    return map(compilation.assets, (asset, filename) => throttle(async () => {\n      const assetSource = asset.source()\n      // Skip the image if it's not a match for the regex or it's too big/small\n      if (testFunction(filename, assetSource)) {\n        // Use the helper function to get the file from cache if possible, or\n        // run the optimize function and store it in the cache when done\n        let optimizedImageBuffer = await getFromCacheIfPossible(cacheFolder, filename, () => {\n          return optimizeImage(assetSource, this.options.imageminOptions)\n        })\n\n        // Then write the optimized version back to the asset object as a \"raw source\"\n        compilation.assets[filename] = new RawSource(optimizedImageBuffer)\n      }\n    }))\n  }\n\n  /**\n   * Optimizes external images\n   * @param  {Function} throttle The setup throttle library\n   * @return {Promise[]}         An array of promises that resolve when each image is done being optimized\n   */\n  optimizeExternalImages (throttle) {\n    const {\n      externalImages: {\n        sources,\n        destination\n      },\n      testFunction,\n      cacheFolder\n    } = this.options\n\n    const invokedDestination = invokeIfFunction(destination)\n\n    return map(invokeIfFunction(sources), (filename) => throttle(async () => {\n      const fileData = await readFile(filename)\n      if (testFunction(filename, fileData)) {\n        const writeFilePath = path.resolve(invokedDestination, filename)\n\n        // Use the helper function to get the file from cache if possible, or\n        // run the optimize function and store it in the cache when done\n        let optimizedImageBuffer = await getFromCacheIfPossible(cacheFolder, filename, async () => {\n          return optimizeImage(await readFile(filename), this.options.imageminOptions)\n        })\n\n        // Write the file to the destination when done\n        return writeFile(writeFilePath, optimizedImageBuffer)\n      }\n    }))\n  }\n}\n"]}